// Generated by CoffeeScript 1.6.3
  var lumenCalc, luminairesCalc, maxwellCalc, ohmCalc, powerCalc, resCalc;

  resCalc = function() {
    var multi, res, sum, type, value1, value2;
    value1 = parseFloat($('#res1_sumRes').val());
    value2 = parseFloat($('#res2_sumRes').val());
    type = $("#type_sumRes input[name='type']:checked").val();
    if (type === "Serie") {
      res = value1 + value2;
      return $('#result_sumRes').attr('value', res + 'Ω‎');
    } else if (type === "Parallel") {
      multi = value1 * value2;
      sum = value1 + value2;
      res = multi / sum;
      return $('#result_sumRes').attr('value', res + 'Ω‎');
    } else {
      return $('#result_sumRes').attr('value', 'How the hell did you not select anything?');
    }
  };

  ohmCalc = function() {
    var intensity, resistance, voltage;
    voltage = parseFloat($('#voltage_ohmCalc').val());
    intensity = parseFloat($('#intensity_ohmCalc').val());
    resistance = parseFloat($('#resistance_ohmCalc').val());
    if (intensity > 0 && resistance > 0 && isNaN(voltage)) {
      voltage = intensity * resistance;
      return $('#voltage_ohmCalc').attr('value', voltage + 'V');
    } else if (voltage > 0 && resistance > 0 && isNaN(intensity)) {
      intensity = voltage / resistance;
      return $('#intensity_ohmCalc').attr('value', intensity + 'A');
    } else if (voltage > 0 && intensity > 0 && isNaN(resistance)) {
      resistance = voltage / intensity;
      return $('#resistance_ohmCalc').attr('value', resistance + 'Ω');
    } else {
      return alert('Error, please let only one empty');
    }
  };

  powerCalc = function() {
    var cosPhi, intensity, power, voltage;
    voltage = parseFloat($('#voltage_powerCalc').val());
    intensity = parseFloat($('#intensity_powerCalc').val());
    cosPhi = parseFloat($('#cosPhi_powerCalc').val());
    power = parseFloat($('#power_powerCalc').val());
    if (intensity > 0 && cosPhi > 0 && power > 0 && isNaN(voltage)) {
      voltage = power / (intensity * cosPhi);
      return $('#voltage_powerCalc').attr('value', voltage + 'V');
    } else if (voltage > 0 && cosPhi > 0 && power > 0 && isNaN(intensity)) {
      intensity = power / (voltage * cosPhi);
      return $('#intensity_powerCalc').attr('value', intensity + 'A');
    } else if (voltage > 0 && intensity > 0 && power > 0 && isNaN(cosPhi)) {
      cosPhi = power / (voltage * intensity);
      return $('#cosPhi_powerCalc').attr('value', cosPhi);
    } else if (voltage > 0 && cosPhi > 0 && intensity > 0 && isNaN(power)) {
      power = voltage * intensity * cosPhi;
      return $('#power_powerCalc').attr('value', power + 'W');
    } else {
      return alert('Error, please let only one empty');
    }
  };

  maxwellCalc = function() {
    var base, c1r1, c1r2, c1r3, c2r1, c2r2, c2r3, c3r1, c3r2, c3r3, int1, int2, int3, sust1, sust2, sust3, value1, value2, value3;
    c1r1 = parseFloat($('#col1row1_maxwellCalc').val());
    c2r1 = parseFloat($('#col2row1_maxwellCalc').val());
    c3r1 = parseFloat($('#col3row1_maxwellCalc').val());
    c1r2 = parseFloat($('#col1row2_maxwellCalc').val());
    c2r2 = parseFloat($('#col2row2_maxwellCalc').val());
    c3r2 = parseFloat($('#col3row2_maxwellCalc').val());
    c1r3 = parseFloat($('#col1row3_maxwellCalc').val());
    c2r3 = parseFloat($('#col2row3_maxwellCalc').val());
    c3r3 = parseFloat($('#col3row3_maxwellCalc').val());
    value1 = parseFloat($('#substituteValue1_maxwellCalc').val());
    value2 = parseFloat($('#substituteValue2_maxwellCalc').val());
    value3 = parseFloat($('#substituteValue3_maxwellCalc').val());
    base = ((c1r1 * c2r2 * c3r3) + (c1r2 * c2r3 * c3r1) + (c1r3 * c2r1 * c3r2)) - ((c3r1 * c2r2 * c1r3) + (c3r2 * c2r3 * c1r1) + (c3r3 * c2r1 * c1r2));
    sust1 = ((value1 * c2r2 * c3r3) + (value2 * c2r3 * c3r1) + (value3 * c2r1 * c3r2)) - ((c3r1 * c2r2 * value3) + (c3r2 * c2r3 * value1) + (c3r3 * c2r1 * value2));
    sust2 = ((c1r1 * value2 * c3r3) + (c1r2 * value3 * c3r1) + (c1r3 * value1 * c3r2)) - ((c3r1 * value2 * c1r3) + (c3r2 * value3 * c1r1) + (c3r3 * value1 * c1r2));
    sust3 = ((c1r1 * c2r2 * value3) + (c1r2 * c2r3 * value1) + (c1r3 * c2r1 * value2)) - ((value1 * c2r2 * c1r3) + (value2 * c2r3 * c1r1) + (value3 * c2r1 * c1r2));
    int1 = sust1 / base;
    int2 = sust2 / base;
    int3 = sust3 / base;
    if (isNaN(int1) && isNaN(int2) && isNaN(int3)) {
      $('#result1_maxwellCalc').attr('value', 'Error, in this equation I need to divide by 0');
      $('#result2_maxwellCalc').attr('value', 'Error, in this equation I need to divide by 0');
      return $('#result3_maxwellCalc').attr('value', 'Error, in this equation I need to divide by 0');
    } else {
      $('#result1_maxwellCalc').attr('value', int1 + 'A');
      $('#result2_maxwellCalc').attr('value', int2 + 'A');
      return $('#result3_maxwellCalc').attr('value', int3 + 'A');
    }
  };

  lumenCalc = function() {
    var averageIluminance, luminousFlux, maintainceFactor, utilizationFactor, workPlane;
    averageIluminance = parseFloat($('#averageIluminance_lumenCalc').val());
    workPlane = parseFloat($('#workPlane_lumenCalc').val());
    maintainceFactor = parseFloat($('#maintainceFactor_lumenCalc').val());
    utilizationFactor = parseFloat($('#utilizationFactor_lumenCalc').val());
    luminousFlux = parseFloat($('#luminousFlux_lumenCalc').val());
    if (averageIluminance > 0 && workPlane > 0 && maintainceFactor > 0 && utilizationFactor > 0 && isNaN(luminousFlux)) {
      luminousFlux = (averageIluminance * workPlane) / (maintainceFactor * utilizationFactor);
      return $('#luminousFlux_lumenCalc').attr('value', luminousFlux);
    } else if (luminousFlux > 0 && workPlane > 0 && maintainceFactor > 0 && utilizationFactor > 0 && isNaN(averageIluminance)) {
      averageIluminance = (luminousFlux * maintainceFactor * utilizationFactor) / workPlane;
      return $('#averageIluminance_lumenCalc').attr('value', averageIluminance);
    } else if (averageIluminance > 0 && luminousFlux > 0 && maintainceFactor > 0 && utilizationFactor > 0 && isNaN(workPlane)) {
      workPlane = (luminousFlux * maintainceFactor * utilizationFactor) / averageIluminance;
      return $('#workPlane_lumenCalc').attr('value', workPlane);
    } else if (averageIluminance > 0 && workPlane > 0 && luminousFlux > 0 && utilizationFactor > 0 && isNaN(maintainceFactor)) {
      maintainceFactor = (averageIluminance * workPlane) / (luminousFlux * utilizationFactor);
      return $('#maintainceFactor_lumenCalc').attr('value', maintainceFactor);
    } else if (averageIluminance > 0 && workPlane > 0 && maintainceFactor > 0 && luminousFlux > 0 && isNaN(utilizationFactor)) {
      utilizationFactor = (averageIluminance * workPlane) / (maintainceFactor * luminousFlux);
      return $('#utilizationFactor_lumenCalc').attr('value', utilizationFactor);
    } else {
      return alert('Error, please let only one empty');
    }
  };

  luminairesCalc = function() {
    var flowLamp, lampsFixture, luminaires, luminousFlux;
    luminousFlux = parseFloat($('#luminousFlux_luminairesCalc').val());
    flowLamp = parseFloat($('#flowLamp_luminairesCalc').val());
    lampsFixture = parseFloat($('#lampsFixture_luminairesCalc').val());
    luminaires = parseFloat($('#luminaires_luminairesCalc').val());
    if (luminousFlux > 0 && flowLamp > 0 && lampsFixture > 0 && isNaN(luminaires)) {
      luminaires = luminousFlux / (flowLamp * lampsFixture);
      return $('#luminaires_luminairesCalc').attr('value', luminaires);
    } else if (luminaires > 0 && flowLamp > 0 && lampsFixture > 0 && isNaN(luminousFlux)) {
      luminousFlux = luminaires * flowLamp * lampsFixture;
      return $('#luminousFlux_luminairesCalc').attr('value', luminousFlux);
    } else if (luminaires > 0 && luminousFlux > 0 && lampsFixture > 0 && isNaN(flowLamp)) {
      flowLamp = luminousFlux / (luminaires * lampsFixture);
      return $('#flowLamp_luminairesCalc').attr('value', flowLamp);
    } else if (luminaires > 0 && flowLamp > 0 && luminousFlux > 0 && isNaN(lampsFixture)) {
      lampsFixture = luminousFlux / (flowLamp * luminaires);
      return $('#lampsFixture_luminairesCalc').attr('value', lampsFixture);
    } else {
      return alert('Error, please let only one empty');
    }
  };

